#!/usr/bin/env sh

# Tested with pulseaudio (Server version 9.0)

# Copyright (c) 2013-2016 Sjors Sparreboom
# The MIT License (MIT) http://opensource.org/licenses/MIT

usage() {
  cat << EOF

  NOTES:
  This program requires that pactl is installed!

  DESCRIPTION:
  This program is a wrapper around pactl and tries to make your
  life easier by making it less verbose and easier to manage your
  sound cards and available sinks.

  IMPORTANT!

  THIS PROGRAM REQUIRES THAT YOU SET YOUR 'CARDS', 'PROFILES' AND 'SINKS' AS ENVIRONMENT VARIABLES!

  Your 'sink', 'card' and 'profile' can be found by running soundctl: [cards,sinks,profiles]!
  SEE SOUNDCTL OPTIONS BELOW!

  For this program to work you have to set the following ENVIRONMENT VARIABLES, either
    in your .zshenv or .profile respectively:
    -> DEFAULT_PROFILE
    -> DEFAULT_SND_CARD
    -> DEFAULT_SINK

    For HDMI support additional VARIABLES are needed:
      -> HDMI_PROFILE
      -> HDMI_SND_CARD
      -> HDMI_SINK

      Additionally 10 other sound devices can be set.
      The naming conventions for these ENVIRONMENT VARIABLES, where X is the position of [0-9]:
      -> EXTERNAL_PROFILE_0X
      -> EXTERNAL_SND_CARD_0X
      -> EXTERNAL_SINK_0X


      SOUNDCTL OPTIONS:

      external [n]    |  move sink to a external device
      default         |  move sink to the default device
      hdmi            |  move sink to the hdmi device
      set-volume [n]  |  set the volume of the sinks

      profiles        |  overview of all the profile available
      cards           |  list card information
      sinks           |  list sink information
      volume          |  list volume levels

      restart         |  restart sound server
      help            |  show this page

EOF
}

# set up to 10 different audio devices!
external() {
  PROFILE="\$EXTERNAL_PROFILE_0"
  CARD="\$EXTERNAL_SND_CARD_0"
  SINK="\$EXTERNAL_SINK_0"

  if (( $# == 1 )); then
    [[ ! $1 =~ ^[0-9]+$ ]] && printf "%s\n" "Error: Not a valid number" && exit 1;
    if (( "$1" != 0 )); then
      PROFILE="\$EXTERNAL_PROFILE_0${1#0}"
      CARD="\$EXTERNAL_SND_CARD_0${1#0}"
      SINK="\$EXTERNAL_SINK_0${1#0}"
    fi
  fi

  for (( i = 0; i < 10; i++ )); do
    # results of the evaluations
    PRSLT=$(eval echo ${PROFILE}${i})
    CRSLT=$(eval echo ${CARD}${i})
    SRSLT=$(eval echo ${SINK}${i})

    # check
    [[ ( ! -z "$CRSLT" && ! -z "$SRSLT" && ! -z "$PRSLT" ) ]] && switch "$CRSLT" "$SRSLT" "$PRSLT"
  done
}

# switch to the provided device
# param order:
# param1 -> card name
# param2 -> sink name
# param3 -> profile
switch() {
  AVAILABLE=$(pactl list sinks short | awk -v sink="$2" '{ IGNORECASE = 1; if($2 ~ sink && /running/ || /idle/) { {print $1} ; } ; }')

  if [[ -z "$AVAILABLE" ]] && pactl set-card-profile "$1" "$3"; then
    pactl set-sink-volume "$2" 25% # ! IMPORTANT SO YOUR EAR DRUMS WON'T BLOW UP
    pactl move-sink-input "$(pactl list sink-inputs short | awk 'NR==1 {print $1}')" "$2"
  fi
}

default() {
  # base environment variables
  PROFILE="\$DEFAULT_PROFILE"
  CARD="\$DEFAULT_SND_CARD"
  SINK="\$DEFAULT_SINK"

  # results of the evaluations
  PRSLT=$(eval echo ${PROFILE})
  CRSLT=$(eval echo ${CARD})
  SRSLT=$(eval echo ${SINK})

  # check
  [[ ( ! -z "$CRSLT" && ! -z "$SRSLT" && ! -z "$PRSLT" ) ]] && switch "$CRSLT" "$SRSLT" "$PRSLT"
}

# Special case because there has to be a connection to the display
hdmi() {
  # base environment variables
  PROFILE="\$HDMI_PROFILE"
  CARD="\$HDMI_SND_CARD"
  SINK="\$HDMI_SINK"
  HDMI_STAT=$(cat /sys/class/drm/card0/*HDMI*/status)

  # results of the evaluations
  PRSLT=$(eval echo ${PROFILE})
  CRSLT=$(eval echo ${CARD})
  SRSLT=$(eval echo ${SINK})

  # check
  if [[ $HDMI_STAT == connected ]]; then
    [[ ( ! -z "$CRSLT" && ! -z "$SRSLT" && ! -z "$PRSLT" ) ]] && switch "$CRSLT" "$SRSLT" "$PRSLT"
  fi
}

setvolume() {
  (( $# != 1 )) && printf "%s\n" "Please provide a volume level in percentage!" && exit 1

  SINK_NAMES=($(pactl list sinks short | awk '{printf("%s\n", $2 )}'))

  for i in ${SINK_NAMES[@]}; do
    pactl set-sink-volume "$i" "$1%"
  done
}

cards() {
  printf "%s\n" "----| Card Names |----"

  pactl list cards                              | \
    sed -n '/card #/I,/card_name/Ip'            | \
    sed '/Driver/,/module/Id'                   | \
    sed 's/^[ \t]*//'                           | \
    column -t -s ":="                           | \
    sed '/Card/i\\n'                            | \
    sed '/Card/a..............'                 | \
    sed '/Properties/Id'

}

sinks() {
  printf "\n\n%s\n" "----| Sink Names |----"

  pactl list sinks                              | \
    sed -n '/sink #/I,/card_name/Ip'            | \
    sed '/Driver/,/Properties/Id'               | \
    sed '/description/I,/alsa.subclass/d'       | \
    sed '/subdevice/d'                          | \
    sed 's/^[ \t]*//'                           | \
    column -t -s ":="                           | \
    sed '/Sink/i\\n'                            | \
    sed '/Sink/a..............'
}

volume() {
  printf "\n\n%s\n\n" "----| Sink Volumes |----"

  pactl list sinks                              | \
    sed -n '/Sink #/I, /.Volume/Ip'             | \
    sed '/Description/,/Mute/d'                 | \
    sed 's/^[ \t]*//'                           | \
    sed 's/front[^%]*\///g'                     | \
    sed 's/[/].*$//'                            | \
    column -t                                   | \
    sed '/Sink/a..............'                 | \
    sed '/Volume/a\\n'
}

restart() {
  printf "%s\n" "Restarting sound server!"
  pulseaudio -k &>/dev/null
  printf "%s\n" "Done!"
}

# get the profile names
profiles() {
  line="..............................................\
    .........................................................................."
  printf "\n\n%s\n\n" "----| Profiles |---- "

  pactl list cards                              | \
    awk '/Profiles/,/Active Profile/'           | \
    sed '/Profiles\|Active/d;'                  | \
    sed 's/^[ \t]*//'                           | \
    sed "1 i\\$line"                            | \
    sed "/off/Ia\\$line"                        | \
    sed '$d'                                    | \
    sed '/\.\../i\\'
}

# EXECUTE, MAKE MY LIFE EASIER!
main() {
  (( $EUID == 0 )) && printf "%s\n" "For security reasons this script shouldn't be run as root and therefore execution will stop here!" && exit 1

  ( ! hash pactl &>/dev/null ) && printf "%s\n" "This program requires that pactl is installed!" && exit 1

  # check if arguments are provided
  (( $# == 0 )) && usage  && exit 1

  actions=("external" "default" "hdmi" "volume" "cards" "sinks" "restart" "help" "profiles" "set-volume")

  if (( $# == 1 )) || (( $# == 2 )); then
    case "$1" in
      default)  default         ;;
      hdmi) hdmi                ;;
      external*) external $2    ;;
      set-volume) setvolume $2  ;;
      volume) volume            ;;
      cards) cards              ;;
      sound) sound              ;;
      sinks) sinks              ;;
      profiles) profiles        ;;
      restart) restart          ;;
      *) usage                  ;;
    esac
  fi

}

main $1 $2

# vim:set ft=sh et sw=2 ts=2 tw=79:
