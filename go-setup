#!/usr/bin/env bash
# ----------------------------------------------------
# file:     $HOME/go-setup.sh
# author    jls - http://sjorssparreboom.nl
# vim:nu:ai:si:et:ts=4:sw=4:fdm=indent:fdn=1:ft=sh:
# ----------------------------------------------------


if [ ! -n "${GOPATH+1}" ]; then
    printf "Set your GOPATH!\n";
    exit 0
fi
# set version number
# ----------------------------------------------------
VERSION=1.0
FILENAME="go-setup"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECTDIR=

# colours
# ----------------------------------------------------
lt=$'\e[1;36m' # light cyan
dk=$'\e[0;36m' # dark cyan
tx=$'\e[1;32m' # green text
mg=$'\e[1;35m' # magenta text
ec=$'\e[0m'

# ASCII goodnessâ€¦
# ----------------------------------------------------
logo() {
cat <<- EOF

${lt}                 +
                 #                 ${tx}
                ###                ${tx}
               #####               ${tx}
               ######              ${tx}
              ; #####;             ${tx}
             +##.#####             ${tx}
            +##########            ${tx}
           #############;          ${tx}
          ###############          ${tx}
         #######   #######         ${tx}
       .######;     ;#####\`.      ${tx}
      .#######;     ;#######.      ${tx}
      #########.   .########\`
     ######'           '######
    ;####                 ####;
    ##'                     '##
   #'                         \`#
  '                            \`${ec}
${mg}BUILD ON ARCH${ec}
${dk}Go project builder - ${mg}Version $VERSION${ec}
EOF
}
# help
# ----------------------------------------------------
help() {
cat <<- EOF
${mg}SYNOPSIS${ec}
${dk}$FILENAME -p <projectname> -r <repository> ${ec}
${mg}OPTIONS${ec}
${dk}-h             Show this message${ec}
${dk}-d             Create the folder structure${ec}
${dk}-r             Add repository${ec}
${dk}-v             Version${ec}
${mg}APPLICATION TYPES${ec}
${dk}console        Console Application${ec}
${mg}EXAMPLE${ec}
${dk}$FILENAME -d -r github.com/your-name/repo ${ec}
EOF
}

# Create the directories
# ----------------------------------------------------
createFolders() {
    mkdir -p $GOPATH/bin &>/dev/null
    mkdir -p $GOPATH/pkg &>/dev/null
    mkdir -p $GOPATH/src &>/dev/null
}

addRepo() {
    mkdir -p $GOPATH/src/$OPTARG &>/dev/null
    cd $GOPATH/src/$OPTARG
    touch README.md && printf "%s \n" "$(date)" > README.md && printf "%s \n" "PROJECT DESCRIPTION:" >> README.md
    printf "%s \n" "Intializing repository!"
    git init
    git add README.md
    git remote add origin https://$OPTARG.git
    printf "%s \n" "Don't forget to manually add the repo on github! Goodbye!"
}

# show/check options
# ----------------------------------------------------
if [ $# -eq 0 ] ; then
    logo
    help
    exit 1;
fi
while getopts ":v:h:r:d" opt
  do
    case "$opt" in
      "v")
        printf "${mg}Version $VERSION\n${ec}"
        exit 0;
        ;;
      "h")
        logo
        help
        exit 0;
        ;;
      "d")
        createFolders
        ;;
      "r")
        addRepo
        ;;
      "?")
        printf "Unknown option $OPTARG\n"
        exit 1;
        ;;
      ":")
        printf "No argument value for option $OPTARG\n"
        exit 1;
        ;;
        *)
        printf "Unknown error while processing options\n"
        exit 0;
        ;;
    esac
  done
shift $(($OPTIND - 1))
# Trap pid and request lock
# ----------------------------------------------------
LOCK_FILE=/tmp/${SUBJECT}.lock
if [ -f "$LOCK_FILE" ]; then
printf "Script is already running\n"
exit
fi
trap "rm -f $LOCK_FILE" EXIT
touch $LOCK_FILE 
