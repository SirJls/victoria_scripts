#! /bin/bash

SECONDS=0

set -e

log() {
  local level=${1?}
  shift
  local code=''
  local msg=">>> $*"
  msg_array=($msg)
  msg=${msg_array[@]}
  if [ -t 2 ]
  then
    case "$level" in
      INFO) code=36 ;;
      DEBUG) code=30 ;;
      WARN) code=33 ;;
      ERROR) code=31 ;;
      SUCCESS) code=32 ;;
      *) code=0  ;;
    esac
    echo -e "\e[${code}m${msg}\e[0m"
  else
    echo "$msg"
  fi >&2
}

log INFO "Finding dotfiles, builds and script directories..."

scriptfiles="$(realpath $(dirname ${BASH_SOURCE}))"
machine_dir="$(realpath $(dirname $scriptfiles))"
dotfiles=$(find $machine_dir -maxdepth 1 -type d -name "*dotfiles")
buildfiles=$(find $machine_dir -maxdepth 1 -type d -name "*builds")

old_dotfiles="${HOME}/.dotfiles_old"
install_file=$(ls -A ${dotfiles}/install)

if [[ ! -d $old_dotfiles ]]; then
  log NORM "Creating directory ${old_dotfiles}."
  mkdir $old_dotfiles
fi

if [[ ! -z $install_file ]]; then
  log SUCCESS "Found install file: ${install_file}!\n"
  while read line; do
    comment=$(echo $line | awk '{ if (/^#/) { print "0" } else { print "1"} }')
    empty=$(echo $line | awk '{ if (/./) { print "1" } else { print "0" } }')
    if (( $comment == 1 )) && (( $empty == 1 )); then
      file=$line
      stripped_file=$(echo $file | sed -e 's/^.*\///')

      yes | rm -rf  "${old_dotfiles}/.*"
      yes | rm -rf "${old_dotfiles}/*"

      log NORM "Moving ${stripped_file} -> ${old_dotfiles}"
      if test -L "${HOME}/.${stripped_file}" ; then
        mv "${HOME}/.${stripped_file}" "${old_dotfiles}"
      fi

      log NORM "Symbolic link ${dotfiles}/${file} -> ${HOME}/.${stripped_file}"

      ln -s "${dotfiles}/${file}" "${HOME}/.${stripped_file}"

    fi
  done < $install_file
fi

printf "\n"

log INFO "Zsh consistency checks..."

# zsh config stuff
if ( hash zsh &>/dev/null ); then
  log SUCCESS "Zsh shell found!\n"
  log INFO "Adding \$SCRIPT, \$DOTFILES and \$BUILDS to ${dotfiles}/zsh/zshenv"

  # setup correct paths for configs in zshenv
  sed -i "s#DOTFILES=.*#DOTFILES=\"${dotfiles}\"#g" "${dotfiles}/zsh/zshenv"
  sed -i "s#SCRIPTS=.*#SCRIPTS=\"${scriptfiles}\"#g" "${dotfiles}/zsh/zshenv"
  sed -i "s#BUILDS=.*#BUILDS=\"${buildfiles}\"#g" "${dotfiles}/zsh/zshenv"

  export DOTFILES=${dotfiles/zsh/zshenv}

  if [[ ! -d "${DOTFILES}/zsh/history" ]]; then
    log NORM "Creating directory ${DOTFILES}/zsh/history"
    mkdir -p "${DOTFILES}/zsh/history"
    if [[ ! -f "${DOTFILES}/zsh/history/histfile" ]]; then
      log NORM "Creating file ${DOTFILES}/zsh/history/histfile"
      touch "${DOTFILES}/zsh/history/histfile"
    fi
  fi

else
  log ERROR "Zsh was not found on your computer, please install!"
  exit 1
fi

if ( ! hash dropbox ); then
  log ERROR "Dropbox was not found on your computer, please install!"
  exit 1
fi

if ( ! hash emacs ); then
  log ERROR "Emacs was not found on your computer, please install!"
  exit 1
else
    if [[ -d "${HOME}/spacemacs" ]]; then
      git clone https://github.com/syl20bnr/spacemacs.git
      (cd "${HOME}/spacemacs" && git checkout develop)
    fi
    if [[ -d "${HOME}/spacemacs-personal" ]]; then
      git clone https://github.com/SirJls/spacemacs-personal.git
    fi
fi 2>/dev/null

printf "\n"

printf "\n"

# vim config stuff

log INFO "Setting up vim development environment..."

if [[ ! -d "${DOTFILES}/vim/backup" ]]; then
  log NORM "Creating directory ${DOTFILES}/vim/backup"
  mkdir -p "${DOTFILES}/vim/backup"
fi

if [[ ! -d "${DOTFILES}/vim/autload" ]]; then
  log NORM "Creating directory ${DOTFILES}/vim/autoload"
  mkdir -p "${DOTFILES}/vim/autoload"
fi

nprofile=$(netctl list | sed -n '/*/p' | sed -n 's/\*//gp')
cprofile=$(connmanctl state | sed -n '1s/State[^a-zA-Z]*//p' | tr -d ' ')

if [[ -z $nprofile ]] && [[ -z $cprofile ]]; then
  log ERROR "Could not find an active profile, make sure you are connected to a
  access point!\n"
  exit 1
fi

device=$(ip link | sed -n '/BROADCAST/p' | awk '{print $2}' | cut -d : -f1)
carrier=$(</sys/class/net/${device}/carrier)

if [[ ! -f "${DOTFILES}/vim/autoload/plug.vim" ]]; then
  log ERROR "Could not find file ${DOTFILES}/vim/autoload/plug.vim\n"

  case "${carrier}" in
    1) curl -o "${DOTFILES}/vim/autoload/plug.vim" \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 
    ;;
  *) log ERROR "Make sure you have a working internet connection to use \ 
    the vim plugins\n"
  exit 1
  ;;
  esac
fi

printf "\n"

log INFO "Installing Plugins, this may take a while!"

# Install the plugins
( vim -c :PlugInstall! -c :xa! ) &> /dev/null

log SUCCESS "Plugins installed!"

printf "\n"

# save old working dir
old_working_dir=$(pwd)

# change directory
cd "$DOTFILES"

if ( ! hash vim ); then
  ycm_hook=$(awk '/YouCompleteMe/' "${DOTFILES}/vim/vimrc" | wc -l)
  ycm_install_script=$(find . -regextype sed -regex ".*YouCompleteMe.install.py$")

  if ( hash python2 &>/dev/null); then
    if (( $ycm_hook > 0 )); then
      flags=("/usr/bin/python2 ${ycm_install_script}")
      log SUCCESS "YouCompleteMe hook detected!"
      if [[ -z $ycm_install_script ]]; then
        if ( hash clang &>/dev/null ); then
          log ERROR "Could not find install.py for YouCompleteMe!\n"
          exit 1
        fi
      else
        flags+=" --clang-completer"
        log NORM "Compiling YCM with semantic support for C-family languages"
        if ( hash mono &>/dev/null ); then
          log SUCCESS "Mono detected!"
          log NORM "Compiling YCM with semantic support for C#\n"
          flags+=' --omnisharp-completer'
        fi

        # start compile
        ${flags[@]}

        log SUCCESS "Successfully installed all the plugins!\n"

      fi
    fi
  else
    log ERROR "Python was not detected on your system, please make sure you have
    python2 installed!\n"
    exit 1
  fi
fi 2>/dev/null

# change back to where we launched the script
cd "$old_working_dir"

if ( hash abook &>/dev/null ); then
  addressbook_location="${DOTFILES}/abook/addressbook"
  log SUCCESS "Found abook!"
  if ( hash mutt &>/dev/null ); then
    log SUCCESS "Found mutt!"

    log SUCCESS "Found mutt and abook combination, now checking
    ${addressbook_location} for valid addressbook!"

    addressbook=$(ls -A $addressbook_location)
    if [[ ! -z $addressbook ]]; then

      log SUCCESS "Valid addressbook found, exporting abook contacts to mutt
      alias file..."

      touch ${HOME}/.mutt/alias

      abook --convert \
        --informat abook --infile $DOTFILES/abook/addressbook \
        --outformat mutt --outfile $HOME/.mutt/alias.new
      mv $HOME/.mutt/alias $HOME/.mutt/alias.bak
      mv $HOME/.mutt/alias.new $HOME/.mutt/alias


      log SUCCESS "Successfully exported abook contacts to mutt alias file!"

    fi
  fi
fi

ELAPSED="Elapsed time: $(($SECONDS / 3600))hrs $((($SECONDS / 60) % 60))min $(($SECONDS % 60))sec"

log INFO "${ELAPSED}"

exit 0

# vim:set ft=sh et sw=2 ts=2 tw=79:
