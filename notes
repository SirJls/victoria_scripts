#!/usr/bin/env bash

# ----------------------------------------------------
# file:     $HOME/scripts/notes
# author    jls - http://sjorssparreboom.nl
# ----------------------------------------------------

# Tested with: ghostscript 9.19, {pdf}TeX 3.14159265
# pandoc 1.17.2

# Copyright (c) 2013-2016 Sjors Sparreboom
# The MIT License (MIT) http://opensource.org/licenses/MIT

# Heavily based of the work of Conner McDaniel

set -e

# Did something wrong?
# Or you don't remember something
# Call usage
usage() {

cat << EOF

	NOTES:
	This program has dependencies see the 'IMPORTANT' section

	DESCRIPTION:
	This program is a wrapper around pandoc which helps me
	convert my notes (written in markdown) into ".pdf" and
	.html for slide show presentations as well as combining
	the the ".pdf's" into a structured and ordered 'master'
	pdf.

	IMPORTANT!
	THIS PROGRAM REQUIRES THAT YOU HAVE THE FOLLOWING INSTALLED:
	   -> Pandoc
	   -> LaTex
	   -> Ghostscript

	For a different font rendering export the following ENVIRONMENT VARIABLE:
	   -> NOTES_FONT

	This will create a font.tex file in \$NOTES_DIR containing your font.


	NOTES OPTIONS:

	all	             |  Convert all the notes
	make [year]          |  Convert all notes for a specfic year
	make [year] [module] |  Convert all notes for a specific year and module


	EXAMPLES:

	notes all

		convert all notes

	notes make 2016

		convert all notes for the year 2016

	notes make 2016 mod_algorithms

		convert all notes for year 2016 with module algorithms

EOF
}

# Grab the notes
grabnotes() {
	ack -n "> Date: " . | \
		while read line; do
			module=$(printf "%s\n" "$line" | sed 's/\([^ ]*\) .*/\1/')
			file=$(printf "%s\n" "$line"   | sed 's/\([^:]*\):2:>.*$/\1/')
			date=$(printf "%s\n" "$line"   | sed 's/[^:]*:2:> Date: \(.*$\)/\1/')
			echo "$module$date $file"
		done | \
			sort -n -t"-" -k1 -k2M -k3 | \
		while read line; do
			file=$(printf "%s\n" "$line" | sed 's/[^ ]* \(.*\)/\1/')
			printf "%s\n"  "$file"
		done
		unset module file date
}

# Function to call for pdf creation
makenotes() {
	for year in "${NOTES_DIR}/YEAR_${1}"; do
		for module in "${year}/MOD_${2}"; do
			cd $module

			notes=$(grabnotes)

			output_file=$(basename $module)

			oldifs=$IFS
			IFS=$'\n'

			makepdf "$output_file" "$notes"
			# makehtml "$output_file" "$notes"

			IFS=$oldifs

			unset notes output_file oldifs
			cd - &>/dev/null
		done
		cd "$year"
		printf "%s\n" "Making YEAR_${year}.pdf..."
		# Add all the pdfs in one overview for the year
		gs -sDEVICE=pdfwrite \
			-dQUIET \
			-o "$(basename $year).pdf" \
			MOD_*/*.pdf &&
			printf "%s\n" "Created ${year}.pdf"
		cd - &>/dev/null
	done
}

# Make pdf with pandoc
makepdf() {
	pandoc --latex-engine=lualatex -H "${NOTES_DIR}/fonts.tex" --toc \
		-o "${1}.pdf" "${NOTES_DIR}/about.md" $2 &&
		printf "%s\n" "${1}.pdf created!"
}

# Make slides with pandoc{slidy} in HTML
makehtml() {
	pandoc -w slidy -H "${NOTES_DIR}/slidy.html" -s $2 | \
		sed -e 's/<h[2-9]/<\/div><div class=\"slide\">&/' \
		-e 's/slidy.js.gz/slidy.js/' > "${1}.html" &&
		printf "%s\n" "${1}.html created!"
}

# Convert everything
makeall() {
	case "$1" in
		"all") printf "%s\n" "Converting all notes..." && \
		       makenotes "*" "*"; return 0
		       ;;
	esac

	usage
}

# Covert all modules for a specific year
makeyear() {
	case "$1" in
		"make")
		if [[ $(isnumber "$2") == "true" ]]; then
			printf "%s\n" "Converting notes in YEAR_${2}..."
			makenotes "$2" "*"; return 0
		fi
		;;
	esac

	usage
}

# Convert the whole module
makemodule() {
	case "$1" in
		"make")
		if [[ $(isnumber "$2") == "true" ]] && \
		   [[ "$3" != "" ]]; then
			printf "%s\n" "Converting notes in YEAR_${2}/MOD_${3}..."
			makenotes "$2" "$3"; return 0
		fi
		;;
	esac

	usage
}

# Am i a number?
isnumber() {
	(( $# < 1 )) && return 1
	if [[ "$1" = [0-9]* ]]; then
		printf "%s\n" "true"
	else
		printf "%s\n" "false"
	fi
}

# is the font specified?
setfont() {
	[[ -z $NOTES_FONT ]] && FONT="TeX Gyre Pagella" || FONT=${NOTES_FONT}
	printf "%s\n\n%s\n"\
		"% AUTOGENERATED FILE BY NOTES!" \
		"\\setromanfont{${FONT}}" \
		> "${NOTES_DIR}/fonts.tex"
}

# Call me to start the awesomeness!
main() {
	# dependency checking
	( ! hash pandoc &> /dev/null ) && usage && return 1
	( ! hash gs &> /dev/null ) && usage && return 1
	( ! hash latex || ! hash tex &> /dev/null ) && usage && return 1

	# arg checking
	(( $# <= 0 )) && usage && return 1 # We need arguments
	(( $# >= 4 )) && usage && return 1 # To many args isn't accepted

	setfont

	(( $# == 1 )) && makeall "$1"
	(( $# == 2 )) && makeyear "$1" "$2"
	(( $# == 3 )) && makemodule "$1" "$2" "$3"
}

# Start the awesomeness!
main $1 $2 $3

# vim:nu:ai:noet:sts=8:sw=8:ts=8:
